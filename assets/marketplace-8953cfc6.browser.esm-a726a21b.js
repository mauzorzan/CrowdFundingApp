var G=Object.defineProperty;var U=(l,t,r)=>t in l?G(l,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):l[t]=r;var c=(l,t,r)=>(U(l,typeof t!="symbol"?t+"":t,r),r);import{cV as V,a1 as z,v as Y,cW as H,a2 as M,b4 as w,cX as A,B as s,bk as L,o as p,y as v,bD as I,c5 as K,T as u,cY as _,X as W,bh as C,bF as X,ba as Z,by as q,cZ as Q,c4 as R,bL as P,c_ as j,c as b,ai as S}from"./index-5017bff6.js";import{D as J,f as D,I as tt,c as rt}from"./QueryParams-72049a45.browser.esm-9c3ba8d4.js";import{m as B,v as N,h as x,a as et,i as at}from"./marketplace-00d6777b.browser.esm-b2675cef.js";import{a as nt,b as st,G as ot,C as F}from"./contract-appuri-11efae43.browser.esm-da0526a0.js";import{C as it}from"./contract-interceptor-d7b164a7.browser.esm-7eabd2ea.js";import{C as ct}from"./contract-platform-fee-6cd82ace.browser.esm-0ae6a79d.js";import{C as dt}from"./contract-roles-b0fa3fbf.browser.esm-c67a58d9.js";import{c as $}from"./cleanCurrencyAddress-507bc2cf.browser.esm-a33fccc7.js";import{s as E}from"./setErc20Allowance-08d8826c.browser.esm-6c0c7c99.js";let g=function(l){return l[l.Direct=0]="Direct",l[l.Auction=1]="Auction",l}({});class pt{constructor(t,r){c(this,"createListing",p(async t=>{N(t);const r=await W(t.assetContractAddress),e=await W(t.currencyContractAddress);await x(this.contractWrapper,this.getAddress(),r,t.tokenId,await this.contractWrapper.getSignerAddress());const a=await C(this.contractWrapper.getProvider(),t.buyoutPricePerToken,e),n=await C(this.contractWrapper.getProvider(),t.reservePricePerToken,e);let o=Math.floor(t.startTimestamp.getTime()/1e3);const h=(await this.contractWrapper.getProvider().getBlock("latest")).timestamp;o<h&&(o=h);const d=u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"createListing",args:[{assetContract:r,tokenId:t.tokenId,buyoutPricePerToken:a,currencyToAccept:$(e),listingType:g.Auction,quantityToList:t.quantity,reservePricePerToken:n,secondsUntilEndTime:t.listingDurationInSeconds,startTime:s.from(o)}],parse:m=>({id:this.contractWrapper.parseLogs("ListingAdded",m==null?void 0:m.logs)[0].args.listingId,receipt:m})});return d.setGasLimitMultiple(1.2),d}));c(this,"createListingsBatch",p(async t=>{const r=(await Promise.all(t.map(a=>this.createListing.prepare(a)))).map(a=>a.encode()),e=u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"multicall",args:[r],parse:a=>this.contractWrapper.parseLogs("ListingAdded",a==null?void 0:a.logs).map(o=>({id:o.args.listingId,receipt:a}))});return e.setGasLimitMultiple(1.2),e}));c(this,"buyoutListing",p(async t=>{const r=await this.validateListing(s.from(t)),e=await X(this.contractWrapper.getProvider(),r.currencyContractAddress);return this.makeBid.prepare(t,Z(r.buyoutPrice,e.decimals))}));c(this,"makeBid",p(async(t,r)=>{const e=await this.validateListing(s.from(t)),a=await C(this.contractWrapper.getProvider(),r,e.currencyContractAddress);if(a.eq(s.from(0)))throw new Error("Cannot make a bid with 0 value");const n=await this.contractWrapper.read("bidBufferBps",[]),o=await this.getWinningBid(t);if(o){const f=et(o.pricePerToken,a,n);v(f,"Bid price is too low based on the current winning bid and the bid buffer")}else{const f=a,y=s.from(e.reservePrice);v(f.gte(y),"Bid price is too low based on reserve price")}const i=s.from(e.quantity),h=a.mul(i),d=await this.contractWrapper.getCallOverrides()||{};await E(this.contractWrapper,h,e.currencyContractAddress,d);const m=u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"offer",args:[t,e.quantity,e.currencyContractAddress,a,q],overrides:d});return m.setGasLimitMultiple(1.2),m}));c(this,"cancelListing",p(async t=>{const r=await this.validateListing(s.from(t)),e=s.from(Math.floor(Date.now()/1e3)),a=s.from(r.startTimeInEpochSeconds),n=await this.contractWrapper.read("winningBid",[t]);if(e.gt(a)&&n.offeror!==w)throw new Q(t.toString());const o=u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"closeAuction",args:[s.from(t),await this.contractWrapper.getSignerAddress()]});return o.setGasLimitMultiple(1.2),o}));c(this,"closeListing",p(async(t,r)=>{r||(r=await this.contractWrapper.getSignerAddress());const e=await this.validateListing(s.from(t));try{const a=u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"closeAuction",args:[s.from(t),r]});return a.setGasLimitMultiple(1.2),a}catch(a){throw a.message.includes("cannot close auction before it has ended")?new R(t.toString(),e.endTimeInEpochSeconds.toString()):a}}));c(this,"executeSale",p(async t=>{const r=await this.validateListing(s.from(t));try{const e=await this.getWinningBid(t);v(e,"No winning bid found");const a=this.encoder.encode("closeAuction",[t,r.sellerAddress]),n=this.encoder.encode("closeAuction",[t,e.buyerAddress]),o=u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"multicall",args:[a,n]});return o.setGasLimitMultiple(1.2),o}catch(e){throw e.message.includes("cannot close auction before it has ended")?new R(t.toString(),r.endTimeInEpochSeconds.toString()):e}}));c(this,"updateListing",p(async t=>{const r=u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"updateListing",args:[t.id,t.quantity,t.reservePrice,t.buyoutPrice,t.currencyContractAddress,t.startTimeInEpochSeconds,t.endTimeInEpochSeconds]});return r.setGasLimitMultiple(1.2),r}));this.contractWrapper=t,this.storage=r,this.encoder=new M(t)}getAddress(){return this.contractWrapper.address}async getListing(t){const r=await this.contractWrapper.read("listings",[t]);if(r.listingId.toString()!==t.toString())throw new A(this.getAddress(),t.toString());if(r.listingType!==g.Auction)throw new _(this.getAddress(),t.toString(),"Direct","Auction");return await this.mapListing(r)}async getWinningBid(t){await this.validateListing(s.from(t));const r=await this.contractWrapper.read("winningBid",[t]);if(r.offeror!==w)return await B(this.contractWrapper.getProvider(),s.from(t),r)}async getWinner(t){const r=await this.validateListing(s.from(t)),e=await this.contractWrapper.read("winningBid",[t]),a=s.from(Math.floor(Date.now()/1e3)),n=s.from(r.endTimeInEpochSeconds);if(a.gt(n)&&e.offeror!==w)return e.offeror;const h=(await new F(this.contractWrapper).getEvents("AuctionClosed")).find(d=>d.data.listingId.eq(s.from(t)));if(!h)throw new Error(`Could not find auction with listingId ${t} in closed auctions`);return h.data.winningBidder}async getBidBufferBps(){return this.contractWrapper.read("bidBufferBps",[])}async getMinimumNextBid(t){const[r,e,a]=await Promise.all([this.getBidBufferBps(),this.getWinningBid(t),this.validateListing(s.from(t))]),n=e?e.currencyValue.value:a.reservePrice,o=n.add(n.mul(r).div(1e4));return P(this.contractWrapper.getProvider(),a.currencyContractAddress,o)}async validateListing(t){try{return await this.getListing(t)}catch(r){throw console.error(`Error getting the listing with id ${t}`),r}}async mapListing(t){return{assetContractAddress:t.assetContract,buyoutPrice:s.from(t.buyoutPricePerToken),currencyContractAddress:t.currency,buyoutCurrencyValuePerToken:await P(this.contractWrapper.getProvider(),t.currency,t.buyoutPricePerToken),id:t.listingId.toString(),tokenId:t.tokenId,quantity:t.quantity,startTimeInEpochSeconds:t.startTime,asset:await D(t.assetContract,this.contractWrapper.getProvider(),t.tokenId,this.storage),reservePriceCurrencyValuePerToken:await P(this.contractWrapper.getProvider(),t.currency,t.reservePricePerToken),reservePrice:s.from(t.reservePricePerToken),endTimeInEpochSeconds:t.endTime,sellerAddress:t.tokenOwner,type:g.Auction}}}class ut{constructor(t,r){c(this,"createListing",p(async t=>{N(t);const r=await W(t.assetContractAddress),e=await W(t.currencyContractAddress);await x(this.contractWrapper,this.getAddress(),r,t.tokenId,await this.contractWrapper.getSignerAddress());const a=await C(this.contractWrapper.getProvider(),t.buyoutPricePerToken,e);let n=Math.floor(t.startTimestamp.getTime()/1e3);const i=(await this.contractWrapper.getProvider().getBlock("latest")).timestamp;n<i&&(n=i);const h=u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"createListing",args:[{assetContract:r,tokenId:t.tokenId,buyoutPricePerToken:a,currencyToAccept:$(e),listingType:g.Direct,quantityToList:t.quantity,reservePricePerToken:a,secondsUntilEndTime:t.listingDurationInSeconds,startTime:s.from(n)}],parse:d=>({id:this.contractWrapper.parseLogs("ListingAdded",d==null?void 0:d.logs)[0].args.listingId,receipt:d})});return h.setGasLimitMultiple(1.2),h}));c(this,"createListingsBatch",p(async t=>{const r=(await Promise.all(t.map(a=>this.createListing.prepare(a)))).map(a=>a.encode()),e=u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"multicall",args:[r],parse:a=>this.contractWrapper.parseLogs("ListingAdded",a==null?void 0:a.logs).map(o=>({id:o.args.listingId,receipt:a}))});return e.setGasLimitMultiple(1.2),e}));c(this,"makeOffer",p(async(t,r,e,a,n)=>{if(I(e))throw new Error("You must use the wrapped native token address when making an offer with a native token");const o=await C(this.contractWrapper.getProvider(),a,e);try{await this.getListing(t)}catch(y){throw console.error("Failed to get listing, err =",y),new Error(`Error getting the listing with id ${t}`)}const i=s.from(r),h=s.from(o).mul(i),d=await this.contractWrapper.getCallOverrides()||{};await E(this.contractWrapper,h,e,d);let m=q;n&&(m=s.from(Math.floor(n.getTime()/1e3)));const f=u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"offer",args:[t,r,e,o,m],overrides:d});return f.setGasLimitMultiple(1.2),f}));c(this,"acceptOffer",p(async(t,r)=>{await this.validateListing(s.from(t));const e=await W(r),a=await this.contractWrapper.read("offers",[t,e]),n=u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"acceptOffer",args:[t,e,a.currency,a.pricePerToken]});return n.setGasLimitMultiple(1.2),n}));c(this,"buyoutListing",p(async(t,r,e)=>{const a=await this.validateListing(s.from(t)),{valid:n,error:o}=await this.isStillValidListing(a,r);if(!n)throw new Error(`Listing ${t} is no longer valid. ${o}`);const i=e||await this.contractWrapper.getSignerAddress(),h=s.from(r),d=s.from(a.buyoutPrice).mul(h),m=await this.contractWrapper.getCallOverrides()||{};await E(this.contractWrapper,d,a.currencyContractAddress,m);const f=u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"buy",args:[t,i,h,a.currencyContractAddress,d],overrides:m});return f.setGasLimitMultiple(1.2),f}));c(this,"updateListing",p(async t=>{const r=u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"updateListing",args:[t.id,t.quantity,t.buyoutPrice,t.buyoutPrice,await W(t.currencyContractAddress),t.startTimeInSeconds,t.secondsUntilEnd]});return r.setGasLimitMultiple(1.2),r}));c(this,"cancelListing",p(async t=>{const r=u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"cancelDirectListing",args:[t]});return r.setGasLimitMultiple(1.2),r}));this.contractWrapper=t,this.storage=r}getAddress(){return this.contractWrapper.address}async getListing(t){const r=await this.contractWrapper.read("listings",[t]);if(r.assetContract===w)throw new A(this.getAddress(),t.toString());if(r.listingType!==g.Direct)throw new _(this.getAddress(),t.toString(),"Auction","Direct");return await this.mapListing(r)}async getActiveOffer(t,r){await this.validateListing(s.from(t)),v(j(r),"Address must be a valid address");const e=await this.contractWrapper.read("offers",[t,await W(r)]);if(e.offeror!==w)return await B(this.contractWrapper.getProvider(),s.from(t),e)}async validateListing(t){try{return await this.getListing(t)}catch(r){throw console.error(`Error getting the listing with id ${t}`),r}}async mapListing(t){return{assetContractAddress:t.assetContract,buyoutPrice:s.from(t.buyoutPricePerToken),currencyContractAddress:t.currency,buyoutCurrencyValuePerToken:await P(this.contractWrapper.getProvider(),t.currency,t.buyoutPricePerToken),id:t.listingId.toString(),tokenId:t.tokenId,quantity:t.quantity,startTimeInSeconds:t.startTime,asset:await D(t.assetContract,this.contractWrapper.getProvider(),t.tokenId,this.storage),secondsUntilEnd:t.endTime,sellerAddress:t.tokenOwner,type:g.Direct}}async isStillValidListing(t,r){if(!await at(this.contractWrapper.getProvider(),this.getAddress(),t.assetContractAddress,t.tokenId,t.sellerAddress))return{valid:!1,error:`Token '${t.tokenId}' from contract '${t.assetContractAddress}' is not approved for transfer`};const a=this.contractWrapper.getProvider(),n=(await b(()=>import("./IERC165-a27c30d6.js"),[])).default,o=new S(t.assetContractAddress,n,a),i=await o.supportsInterface(tt),h=await o.supportsInterface(rt);if(i){const d=(await b(()=>import("./index-5017bff6.js").then(T=>T.fd),["assets/index-5017bff6.js","assets/index-ca0082dc.css"])).default,m=new S(t.assetContractAddress,d,a);let f;try{f=await m.ownerOf(t.tokenId)}catch{}const y=(f==null?void 0:f.toLowerCase())===t.sellerAddress.toLowerCase();return{valid:y,error:y?void 0:`Seller is not the owner of Token '${t.tokenId}' from contract '${t.assetContractAddress} anymore'`}}else if(h){const d=(await b(()=>import("./index-5017bff6.js").then(T=>T.ff),["assets/index-5017bff6.js","assets/index-ca0082dc.css"])).default,y=(await new S(t.assetContractAddress,d,a).balanceOf(t.sellerAddress,t.tokenId)).gte(r||t.quantity);return{valid:y,error:y?void 0:`Seller does not have enough balance of Token '${t.tokenId}' from contract '${t.assetContractAddress} to fulfill the listing`}}else return{valid:!1,error:"Contract does not implement ERC 1155 or ERC 721."}}}const k=class k{constructor(t,r,e){c(this,"getAll",this.getAllListings);c(this,"buyoutListing",p(async(t,r,e)=>{const a=await this.contractWrapper.read("listings",[t]);if(a.listingId.toString()!==t.toString())throw new A(this.getAddress(),t.toString());switch(a.listingType){case g.Direct:return v(r!==void 0,"quantityDesired is required when buying out a direct listing"),await this.direct.buyoutListing.prepare(t,r,e);case g.Auction:return await this.auction.buyoutListing.prepare(t);default:throw Error(`Unknown listing type: ${a.listingType}`)}}));c(this,"makeOffer",p(async(t,r,e)=>{const a=await this.contractWrapper.read("listings",[t]);if(a.listingId.toString()!==t.toString())throw new A(this.getAddress(),t.toString());const n=await this.contractWrapper.getChainID();switch(a.listingType){case g.Direct:return v(e,"quantity is required when making an offer on a direct listing"),await this.direct.makeOffer.prepare(t,e,I(a.currency)?K[n].wrapped.address:a.currency,r);case g.Auction:return await this.auction.makeBid.prepare(t,r);default:throw Error(`Unknown listing type: ${a.listingType}`)}}));c(this,"setBidBufferBps",p(async t=>{await this.roles.verify(["admin"],await this.contractWrapper.getSignerAddress());const r=await this.getTimeBufferInSeconds();return u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"setAuctionBuffers",args:[r,s.from(t)]})}));c(this,"setTimeBufferInSeconds",p(async t=>{await this.roles.verify(["admin"],await this.contractWrapper.getSignerAddress());const r=await this.getBidBufferBps();return u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"setAuctionBuffers",args:[s.from(t),r]})}));c(this,"allowListingFromSpecificAssetOnly",p(async t=>{const r=[];return(await this.roles.get("asset")).includes(w)&&r.push(this.encoder.encode("revokeRole",[L("asset"),w])),r.push(this.encoder.encode("grantRole",[L("asset"),t])),u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"multicall",args:[r]})}));c(this,"allowListingFromAnyAsset",p(async()=>{const t=[],r=await this.roles.get("asset");for(const e in r)t.push(this.encoder.encode("revokeRole",[L("asset"),e]));return t.push(this.encoder.encode("grantRole",[L("asset"),w])),u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"multicall",args:[t]})}));let a=arguments.length>3&&arguments[3]!==void 0?arguments[3]:{},n=arguments.length>4?arguments[4]:void 0,o=arguments.length>5?arguments[5]:void 0,i=arguments.length>6&&arguments[6]!==void 0?arguments[6]:new z(t,r,n,a,e);this._chainId=o,this.abi=Y.parse(n||[]),this.contractWrapper=i,this.storage=e,this.metadata=new nt(this.contractWrapper,H,this.storage),this.app=new st(this.contractWrapper,this.metadata,this.storage),this.roles=new dt(this.contractWrapper,k.contractRoles),this.encoder=new M(this.contractWrapper),this.estimator=new ot(this.contractWrapper),this.direct=new ut(this.contractWrapper,this.storage),this.auction=new pt(this.contractWrapper,this.storage),this.events=new F(this.contractWrapper),this.platformFees=new ct(this.contractWrapper),this.interceptor=new it(this.contractWrapper)}get chainId(){return this._chainId}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.address}async getListing(t){const r=await this.contractWrapper.read("listings",[t]);if(r.assetContract===w)throw new A(this.getAddress(),t.toString());switch(r.listingType){case g.Auction:return await this.auction.mapListing(r);case g.Direct:return await this.direct.mapListing(r);default:throw new Error(`Unknown listing type: ${r.listingType}`)}}async getActiveListings(t){const r=await this.getAllListingsNoFilter(!0),e=this.applyFilter(r,t),a=s.from(Math.floor(Date.now()/1e3));return e.filter(n=>n.type===g.Auction&&s.from(n.endTimeInEpochSeconds).gt(a)&&s.from(n.startTimeInEpochSeconds).lte(a)||n.type===g.Direct&&s.from(n.quantity).gt(0))}async getAllListings(t){const r=await this.getAllListingsNoFilter(!1);return this.applyFilter(r,t)}async getTotalCount(){return await this.contractWrapper.read("totalListings",[])}async isRestrictedToListerRoleOnly(){return!await this.contractWrapper.read("hasRole",[L("lister"),w])}async getBidBufferBps(){return this.contractWrapper.read("bidBufferBps",[])}async getTimeBufferInSeconds(){return this.contractWrapper.read("timeBuffer",[])}async getOffers(t){const r=await this.events.getEvents("NewOffer",{order:"desc",filters:{listingId:t}});return await Promise.all(r.map(e=>B(this.contractWrapper.getProvider(),s.from(t),{quantityWanted:e.data.quantityWanted,pricePerToken:e.data.quantityWanted.gt(0)?e.data.totalOfferAmount.div(e.data.quantityWanted):e.data.totalOfferAmount,currency:e.data.currency,offeror:e.data.offeror})))}async getAllListingsNoFilter(t){return(await Promise.all(Array.from(Array((await this.contractWrapper.read("totalListings",[])).toNumber()).keys()).map(async e=>{let a;try{a=await this.getListing(e)}catch(n){if(n instanceof A)return;console.warn(`Failed to get listing ${e}' - skipping. Try 'marketplace.getListing(${e})' to get the underlying error.`);return}if(a.type===g.Auction)return a;if(t){const{valid:n}=await this.direct.isStillValidListing(a);if(!n)return}return a}))).filter(e=>e!==void 0)}applyFilter(t,r){let e=[...t];const a=s.from((r==null?void 0:r.start)||0).toNumber(),n=s.from((r==null?void 0:r.count)||J).toNumber();return r&&(r.seller&&(e=e.filter(o=>{var i;return o.sellerAddress.toString().toLowerCase()===((i=r==null?void 0:r.seller)==null?void 0:i.toString().toLowerCase())})),r.tokenContract&&(e=e.filter(o=>{var i;return o.assetContractAddress.toString().toLowerCase()===((i=r==null?void 0:r.tokenContract)==null?void 0:i.toString().toLowerCase())})),r.tokenId!==void 0&&(e=e.filter(o=>{var i;return o.tokenId.toString()===((i=r==null?void 0:r.tokenId)==null?void 0:i.toString())})),e=e.filter((o,i)=>i>=a),e=e.slice(0,n)),e}async prepare(t,r,e){return u.fromContractWrapper({contractWrapper:this.contractWrapper,method:t,args:r,overrides:e})}async call(t,r,e){return this.contractWrapper.call(t,r,e)}};c(k,"contractRoles",V);let O=k;export{O as Marketplace};
